<?php

/**
 * @file
 * Contains splash_screen.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Database\Database;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_help().
 */
function splash_screen_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.splash_screen':
      $text = file_get_contents(__DIR__ . '/README.txt');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_theme().
 */
function splash_screen_theme($existing, $type, $theme, $path) {
  // We use a template file to allow for translation of blocks of content.
  // Therefore we need to add this content at the theming layer.
  return [
    'splash_screen' => [
      'template' => 'splash_screen',
      'render element' => 'elements',
    ],
    'splash_screen_block' => [
      'render element' => 'elements',
      'variables' => ['title' => NULL, 'link' => NULL],
      'template' => 'block--ws-custom',
    ],
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function splash_screen_preprocess_html(&$vars) {
  $vars['page']['#attached']['library'][] = 'splash_screen/splash_screen_libr';
  $vars['page']['#attached']['library'][] = 'core/drupal.ajax';

  $node_id = \Drupal::routeMatch()->getRawParameter('node');
  $current_path = '/node/' . $node_id;
  $front_page = \Drupal::service('path.matcher')->isFrontPage();

  if ($front_page && $current_path == '/node/') {
    $current_path = '/node';
  }
  else {
    $current_path = $current_path;
  }
  $conn = Database::getConnection();
  $record = [];
  $query = $conn->select('splash_screen', 's')
    ->condition('page', $current_path)
    ->condition('status', '1')
    ->fields('s');
  $record = $query->execute()->fetchAssoc();

  $_SESSION['splash_screen_details'] = $record;

  if (is_array($record) && count($record) > 0) {
    $vars['page']['#attached']['drupalSettings']['splash_screen']['cuddlySlider']['foo'] = 'yes';
    $vars['page']['#attached']['drupalSettings']['splash_screen']['page']['id'] = $record['page'];
    $vars['page']['#attached']['drupalSettings']['splash_screen']['cookies']['nam'] = 'showPopup' . $record['oid'];
  }
  else {

    $vars['page']['#attached']['drupalSettings']['splash_screen']['cuddlySlider']['foo'] = 'no';
  }
}

/**
 * Function for checking first character in string is "/".
 */
function splash_screen_starts_with($haystack, $needle) {
  $length = strlen($needle);
  return (substr($haystack, 0, $length) === $needle);
}
