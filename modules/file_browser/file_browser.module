<?php
/**
 * @file Contains logic for file_browser.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function file_browser_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the file_browser module.
    case 'help.page.file_browser':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides an entity browser for files.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function file_browser_form_alter(&$form, FormStateInterface &$form_state) {
  if (isset($form['#form_id'])) {
    if ($form['#form_id'] == 'entity_browser_browse_files_form' ||
        $form['#form_id'] == 'entity_browser_browse_files_modal_form') {
      // Attach our library.
      $form['#attached']['library'][] = 'file_browser/view';

      // Style the submit button.
      $form['actions']['submit']['#value'] = t('Select Files');
      $form['actions']['submit']['#attributes']['class'][] = 'button--primary';
      $form['actions']['submit']['#attributes']['class'][] = 'entity-browser-modal-target';

      // Wrap actions so we can float them at the bottom of the browser.
      $form['actions_wrap'] = [
        '#type' => 'container',
        '#attributes' => [
          'class' => 'file-browser-actions',
        ],
        0 => $form['actions'],
      ];
      unset($form['actions']);

      // Add a class for generic styling.
      $form['#attributes']['class'][] = 'file-browser-form';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function file_browser_form_entity_embed_dialog_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($embed_button = $form_state->get('embed_button')) {
    // Check that we're using file_browser.
    if ($embed_button->getTypePlugin()->getConfigurationValue('entity_browser') == 'browse_files') {
      // Override the first step of the form, if we're using file_browser.
      if ($form['actions']['save_modal']['#ajax']['callback'] == '::submitSelectStep') {
        // Add a library which handles our special "Select Files" button.
        $form['#attached']['library'][] = 'file_browser/entity_embed';

        // Visually hide the "Next" button.
        $form['actions']['save_modal']['#attributes']['class'][] = 'visually-hidden';
        $form['actions']['save_modal']['#weight'] = 1;

        // Add a button that matches our normal UX, which clicks the hidden button
        // within the modal's iFrame.
        $form['actions']['save_modal_alt'] = [
          '#type' => 'submit',
          '#value' => t('Select Files'),
          '#attributes' => ['class' => ['entity-browser-modal-submit']],
          '#button_type' => 'primary',
          '#weight' => 0,
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_details().
 */
function file_browser_preprocess_details(&$variables) {
  if (isset($variables['element']['#id']) && $variables['element']['#id'] == 'edit-field-file-browser-reference') {
    $variables['#attached']['library'][] = 'file_browser/iframe';
  }
}

/**
 * Implements hook_library_info_alter().
 */
function file_browser_library_info_alter(&$libraries, $extension) {
  // Optionally use the Libraries module to determine our library paths.
  if ($extension == 'file_browser' && \Drupal::moduleHandler()->moduleExists('libraries')) {
    $imagesloaded_path = libraries_get_path('imagesloaded') . '/imagesloaded.pkgd.min.js';
    $masonry_path = libraries_get_path('masonry') . '/dist/masonry.pkgd.min.js';

    $libraries['imagesloaded']['js'] = ['/' . $imagesloaded_path => ['minified' => 'true']];
    $libraries['masonry']['js'] = ['/' . $masonry_path => ['minified' => 'true']];
  }
}
