<?php

/**
 * @file
 * Contains quick_node_clone.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_entity_type_build().
 */
function quick_node_clone_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setFormClass('quick_node_clone', 'Drupal\quick_node_clone\Form\QuickNodeCloneNodeForm');
  }

}

/**
 * Implements hook_entity_operation().
 */
function quick_node_clone_entity_operation(EntityInterface $entity) {
  $operations = [];
  $bundle = $entity->bundle();

  // Only add an operation for node entities.
  if ($entity->getEntityTypeId() !== 'node') {
    return $operations;
  }

  if (!_quick_node_clone_has_clone_permission($bundle)) {
    return $operations;
  }

  $operations['quick_clone'] = [
    'title' => t('Clone'),
    'weight' => '100',
    'url' => Url::fromRoute('quick_node_clone.node.quick_clone', ['node' => $entity->id()]),
  ];

  return $operations;
}

/**
 * Implements hook_help().
 */
function quick_node_clone_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.quick_node_clone':
      $text = file_get_contents(dirname(__FILE__) . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()
          ->get('markdown.settings')
          ->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Determine if the current user has permission to clone a specified bundle.
 *
 * @param string $bundle
 *   The bundle machine name to examine.
 *
 * @return bool
 *   TRUE or FALSE
 */
function _quick_node_clone_has_clone_permission($bundle) {
  if (!is_string($bundle)) {
    throw new InvalidArgumentException('Argument 1 passed to _quick_node_clone_has_clone_permission() must be of type string, ' . gettype($bundle) . ' given.');
  }
  $current_user = \Drupal::currentUser();
  if ($current_user->hasPermission("administer nodes")) {
    return TRUE;
  }
  if ($current_user->hasPermission("bypass node access")) {
    return TRUE;
  }
  if ($current_user->hasPermission("clone $bundle content") && $current_user->hasPermission("create $bundle content")) {
    return TRUE;
  }
  return FALSE;
}
