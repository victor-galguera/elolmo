<?php

/*
 * @file
 * This module provides 2 voting widgets: Like and Dislike. The behavior is
 * similar to Facebook and other social networks, but with negative rating also.
 */

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\Core\Url;

/**
 * Implementing hook_entity_load()
 *
 * Loads the like/dislike information to the entity object
 */
function like_and_dislike_entity_load(array $entities, $entity_type_id) {
  $config = \Drupal::config('like_and_dislike.settings');
  $vote_result_storage = \Drupal::entityManager()->getStorage('vote_result');

  foreach ($entities as $entity) {
    $config_id = $entity->getEntityTypeId() . '_' . $entity->bundle() . '_available';
    if ($config->get($config_id, FALSE)) {
      $like = $vote_result_storage->getEntityResults(
        $entity_type_id, $entity->id(), 'like', 'vote_count'
      );
      $entity->like = !empty($like) ? current($like)->getValue() : 0;
      $dislike = $vote_result_storage->getEntityResults(
        $entity_type_id, $entity->id(), 'dislike', 'vote_count'
      );
      $entity->dislike = !empty($dislike) ? current($dislike)->getValue() : 0;
    }
  }
}

/**
 * Renders the like/dislike buttons if the user has permission to see it
 */
function like_and_dislike_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  $config = \Drupal::config('like_and_dislike.settings');
  $enabled_view_modes = ['full'];
  $config_id = $entity->getEntityTypeId() . '_' . $entity->bundle() . '_available';

  $entity_type_ids_available_to_vote = \Drupal\like_and_dislike\LikeDislikePermissions::getEntityTypesAvailableToVote();

  $account = \Drupal::currentUser();

  if (
    in_array($entity->getEntityTypeId(), $entity_type_ids_available_to_vote)
    && $config->get($config_id, FALSE)
    && in_array($view_mode, $enabled_view_modes)
  ) {
    $entity_type_id = $entity->getEntityTypeId();
    $links = [];
    if ($account->hasPermission("add or remove like votes on $entity_type_id")) {
      $like_item = \Drupal\Core\Link::fromTextAndUrl(
        $entity->like . ' Like',
        Url::fromRoute('like_and_dislike.vote', [
          'entity_type_id' => $entity->getEntityTypeId(),
          'vote_type_id' => 'like',
          'entity_id' => $entity->id(),
          'destination' => drupal_get_destination()['destination']
        ])
      );
    }
    else {
      $like_item = $entity->like . ' Like';
    }
    $links['like'] = $like_item;
    if ($account->hasPermission("add or remove like votes on $entity_type_id")) {
      $dislike_item = \Drupal\Core\Link::fromTextAndUrl(
        $entity->dislike . ' Dislike',
        Url::fromRoute('like_and_dislike.vote', [
          'entity_type_id' => $entity->getEntityTypeId(),
          'vote_type_id' => 'dislike',
          'entity_id' => $entity->id(),
          'destination' => drupal_get_destination()['destination']
        ])
      );
    }
    else {
      $dislike_item = $entity->dislike . ' Dislike';
    }
    $links['dislike'] = $dislike_item;

    $build['votingapi_links'] = array(
      '#theme' => 'item_list__votingapi',
      '#items' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

function like_and_dislike_vote_insert(EntityInterface $vote) {
  switch ($vote->bundle()) {
    case 'like':
      $vote_type_to_delete = 'dislike';
      break;
    case 'dislike':
      $vote_type_to_delete = 'like';
      break;
  }
  $vote_storage = \Drupal::entityManager()->getStorage('vote');
  $vote_storage->deleteUserVotes(
    $vote->getOwnerId(),
    $vote_type_to_delete,
    $vote->getVotedEntityType(),
    $vote->getVotedEntityId()
  );
}